total_percent_smoking <- sum(nhis2010$Low[data$smokev == 1], data$Med[data$Smoking == "Smoking"])
result_table <- nhis2010 %>%
group_by(smokev) %>%
summarize(
Low_income_percentage = sum(Low) / n(),
Medium_income_percentage = sum(Med) / n()
) %>%
ungroup()
# Convert percentages to percentages (multiply by 100)
result_table <- result_table %>%
mutate(across(contains("percentage"), ~. * 100))
# Display the result table
print(result_table)
nhis2010 %>%
group_by(smokev)
result_table <- nhis2010 %>%
group_by(smokev) %>%
summarize(
Low_income_percentage = sum(Low) / n(),
Medium_income_percentage = sum(Med) / n()
) %>%
ungroup()
result_table
result_table <- nhis2010 %>%
group_by(smokev) %>%
summarize(
Low_income_percentage = sum(Low) / n(),
Medium_income_percentage = sum(Med) / n()
Total = n()
result_table <- nhis2010 %>%
group_by(smokev) %>%
summarize(
Low_income_percentage = sum(Low) / n(),
Medium_income_percentage = sum(Med) / n(),
Total = n()
) %>%
ungroup()
result_table
nhis <- nhis2010 %>%
drop_na((smokev))
result_table <- nhis2010 %>%
group_by(smokev) %>%
summarize(
Low_income_percentage = sum(Low) / n(),
Medium_income_percentage = sum(Med) / n(),
Total = n()
) %>%
ungroup()
result_table
# All question 8 code her
nhis2010 <- nhis2010 %>%
drop_na((smokev))
result_table <- nhis2010 %>%
group_by(smokev) %>%
summarize(
Low_income_percentage = sum(Low) / n(),
Medium_income_percentage = sum(Med) / n(),
Total = n()
) %>%
ungroup()
result_table
# Create a table of combinations
combination_table <- table(nhis2010$Low, nhis2010$smokev)
# Add row and column names for clarity
rownames(combination_table) <- c("LowIncome (No)", "LowIncome (Yes)")
colnames(combination_table) <- c("Smoking (No)", "Smoking (Yes)")
# Print the combination table
print(combination_table)
# Create a table of combinations
combination_table <- table(nhis2010$Low, nhis2010$smokev)
# Add row and column names for clarity
rownames(combination_table) <- c("LowIncome (No)", "LowIncome (Yes)")
colnames(combination_table) <- c("Smoking (No)", "Smoking (Yes)")
combination_table_percent <- (combination_table / n(nhis2010)) * 100
# Create a table of combinations
combination_table <- table(nhis2010$Low, nhis2010$smokev)
# Add row and column names for clarity
rownames(combination_table) <- c("LowIncome (No)", "LowIncome (Yes)")
colnames(combination_table) <- c("Smoking (No)", "Smoking (Yes)")
combination_table_percent <- (combination_table / nrow(nhis2010)) * 100
# Print the combination table
print(combination_table)
# Create a table of combinations
combination_table <- table(nhis2010$Low, nhis2010$smokev)
total = nrow(nhis2010)
# Add row and column names for clarity
rownames(combination_table) <- c("LowIncome (No)", "LowIncome (Yes)")
colnames(combination_table) <- c("Smoking (No)", "Smoking (Yes)")
combination_table_percent <- (combination_table / total)) * 100
# Create a table of combinations
combination_table <- table(nhis2010$Low, nhis2010$smokev)
total = nrow(nhis2010)
# Add row and column names for clarity
rownames(combination_table) <- c("LowIncome (No)", "LowIncome (Yes)")
colnames(combination_table) <- c("Smoking (No)", "Smoking (Yes)")
combination_table_percent <- (combination_table / total) * 100
# Print the combination table
print(combination_table)
nrow(nhis2010)
combination_table <- table(nhis2010$Low, nhis2010$smokev)
combination_table
combination_table <- table(nhis2010$Low/n(nhis2010), nhis2010$smokev)/n(nhis2010)
combination_table <- table(nhis2010$Low/nrow(nhis2010), nhis2010$smokev)/nrow(nhis2010)
total = nrow(nhis2010)
# Add row and column names for clarity
rownames(combination_table) <- c("LowIncome (No)", "LowIncome (Yes)")
colnames(combination_table) <- c("Smoking (No)", "Smoking (Yes)")
combination_table_percent <- (combination_table) * 100
# Print the combination table
print(combination_table)
combination_table <- table(nhis2010$Low/nrow(nhis2010)*100,
nhis2010$smokev)/nrow(nhis2010)*100
# Add row and column names for clarity
rownames(combination_table) <- c("LowIncome (No)", "LowIncome (Yes)")
colnames(combination_table) <- c("Smoking (No)", "Smoking (Yes)")
# Print the combination table
print(combination_table)
combination_table <- table(nhis2010$Low/nrow(nhis2010),
nhis2010$smokev/nrow(nhis2010))
# Add row and column names for clarity
rownames(combination_table) <- c("LowIncome (No)", "LowIncome (Yes)")
colnames(combination_table) <- c("Smoking (No)", "Smoking (Yes)")
# Print the combination table
print(combination_table)
combination_table <- table(nhis2010$Low, nhis2010$smokev)/nrow(nhis2010)
# Add row and column names for clarity
rownames(combination_table) <- c("LowIncome (No)", "LowIncome (Yes)")
colnames(combination_table) <- c("Smoking (No)", "Smoking (Yes)")
# Print the combination table
print(combination_table)
print(combination_table_with_sums)
combination_table_with_sums <- addmargins(combination_table, FUN = list("Sum" = sum))
print(combination_table_with_sums)
#looking at the percent of people in the survey that smoke and/or are low income
nhis2010 %>%
filter(Low*smokev==1) %>%
count()/count(nhis2010)
nhis2010 %>%
filter(Low==1) %>%
count()/count(nhis2010)
nhis2010 %>%
filter(Low==1,smokev==0) %>%
count()/count(nhis2010)
nhis2010 %>%
filter(smokev==1) %>%
count()/count(nhis2010)
nhis2010 %>%
filter(Low==0,smokev==1) %>%
count()/count(nhis2010)
# Create a table of Low income and smoking combinations
combination_table <- table(nhis2010$Low, nhis2010$smokev)/nrow(nhis2010)
# Add row and column names for clarity
rownames(combination_table) <- c("LowIncome (No)", "LowIncome (Yes)")
colnames(combination_table) <- c("Smoking (No)", "Smoking (Yes)")
# Print the combination table
print(combination_table)
nhis2010 %>%
filter(Low*smokev==1) %>%
count()/count(nhis2010)
nhis2010 %>%
filter(Low==1) %>%
count()/count(nhis2010)
nhis2010 %>%
filter(Low==1,smokev==0) %>%
count()/count(nhis2010)
nhis2010 %>%
filter(smokev==1) %>%
count()/count(nhis2010)
nhis2010 %>%
filter(Low==0,smokev==1) %>%
count()/count(nhis2010)
#looking at the percent of people in the survey that smoke and/or are low income
nhis2010 %>%
filter(Low*smokev==1) %>%
count()/count(nhis2010)
nhis2010 %>%
filter(Low==1) %>%
count()/count(nhis2010)
nhis2010 %>%
filter(Low==1,smokev==0) %>%
count()/count(nhis2010)
nhis2010 %>%
filter(smokev==1) %>%
count()/count(nhis2010)
nhis2010 %>%
filter(Low==0,smokev==1) %>%
count()/count(nhis2010)
#19.4% are low income and smoke
#42.1% are Low income
#22.7% are Low income, don't smoke
#41.1% smoke.
#22.7% smoke, not Low income.
# Create a table of Low income and smoking combinations
combination_table <- table(nhis2010$Low, nhis2010$smokev)/nrow(nhis2010)
# Add row and column names for clarity
rownames(combination_table) <- c("LowIncome (No)", "LowIncome (Yes)")
colnames(combination_table) <- c("Smoking (No)", "Smoking (Yes)")
# Print the combination table
print(combination_table)
# Create a table of Low income and smoking combinations
combination_table <- table(nhis2010, nhis2010$Low, nhis2010$smokev)/nrow(nhis2010)
# Create a table of Low income and smoking combinations
combination_table <- table(nhis2010$Low, nhis2010$Med, nhis2010$smokev)/nrow(nhis2010)
# Add row and column names for clarity
rownames(combination_table) <- c("LowIncome (No)", "LowIncome (Yes)")
colnames(combination_table) <- c("Smoking (No)", "Smoking (Yes)")
# Print the combination table
print(combination_table)
# Create a table of Low income and smoking combinations
combination_table <- table(nhis2010$Low, nhis2010$smokev)/nrow(nhis2010)
# Add row and column names for clarity
rownames(combination_table) <- c("LowIncome (No)", "LowIncome (Yes)")
colnames(combination_table) <- c("Smoking (No)", "Smoking (Yes)")
# Print the combination table
print(combination_table)
# All question 8 code her
nhis2010 <- nhis2010 %>%
drop_na((smokev))
#model for smoking on mortality
logit_model_smoke <- feglm(mort ~  age + smokev +
Low + LowMed + Med + MedHigh + High +
LessHS + HsGrad + SomeCol + ColGrad + PostGrad +
black + hisp + asian + other,
data = nhis2010,
vcov = 'hetero',
family = 'logit')
#odds ratio of logit smoking
logitor(logit_model_smoke,
data = nhis2010,
robust = TRUE)
logit_model_smoke
#looking at the percent of people in the survey that smoke and/or are low income
nhis2010 %>%
filter(Low*smokev==1) %>%
count()/count(nhis2010)
nhis2010 %>%
filter(Low==1) %>%
count()/count(nhis2010)
nhis2010 %>%
filter(Low==1,smokev==0) %>%
count()/count(nhis2010)
nhis2010 %>%
filter(smokev==1) %>%
count()/count(nhis2010)
nhis2010 %>%
filter(Low==0,smokev==1) %>%
count()/count(nhis2010)
#19.4% are low income and smoke
#42.1% are Low income
#22.7% are Low income, don't smoke
#41.1% smoke.
#22.7% smoke, not Low income.
# Create a table of Low income and smoking combinations
combination_table <- table(nhis2010$Low, nhis2010$smokev)/nrow(nhis2010)
# Add row and column names for clarity
rownames(combination_table) <- c("LowIncome (No)", "LowIncome (Yes)")
colnames(combination_table) <- c("Smoking (No)", "Smoking (Yes)")
# Print the combination table
print(combination_table)
nhis2010 %>%
filter(Low==0,smokev==1) %>%
count()/count(nhis2010)
nhis2010 %>%
filter(Low==1,smokev==0) %>%
count()/count(nhis2010)
# Print the combination table
print(combination_table)
# All question 8 code her
nhis2010 <- nhis2010 %>%
drop_na((smokev))
#model for smoking on mortality
logit_model_smoke <- feglm(mort ~  age + smokev +
Low + LowMed + Med + MedHigh + High +
LessHS + HsGrad + SomeCol + ColGrad + PostGrad +
black + hisp + asian + other,
data = nhis2010,
vcov = 'hetero',
family = 'logit')
#odds ratio of logit smoking
logitor(logit_model_smoke,
data = nhis2010,
robust = TRUE)
logit_model_smoke
knitr::opts_chunk$set(echo = TRUE) # sets the code chunk format
rm(list = ls()) # clears the environment
# Run OLS regression
ols_model <- lm(comp_score5to6 ~ head_start, data = nlsy_kids)
# The PDF will show the code AND output here.
# Summarize the data here.
#looking at the amount of missing data to determine which ones are worth dropping.
colSums(is.na(nlsy_kids))/nrow(nlsy_kids)
knitr::opts_chunk$set(echo = TRUE) # sets the code chunk format
rm(list = ls()) # clears the environment
# The PDF will show the code you write here but not the output.
# Load packages and dataset here.
rm(list=ls())
library(tidyverse)
library(fixest)
load(url("https://github.com/tvogl/econ121/raw/main/data/nlsy_kids.Rdata"))
# The PDF will show the code AND output here.
# Summarize the data here.
#looking at the amount of missing data to determine which ones are worth dropping.
colSums(is.na(nlsy_kids))/nrow(nlsy_kids)
#ppvt_3 is missing 80%+, dropping would result in most of the data being missing
nlsy_kids<-nlsy_kids %>% drop_na(lninc_0to3, momed, lnbw,
comp_score_5to6 ,learndis)
view(nlsy_kids)
summary(nlsy_kids)
# All question 3 code here.
# Run OLS regression
ols_model <- lm(comp_score5to6 ~ head_start, data = nlsy_kids)
# Run OLS regression
ols_model <- lm(comp_score_5to6 ~ head_start, data = nlsy_kids)
summary(ols_model)
nlsy_kids_HS <- nlsy_kids %>% drop_na(head_start)
ols_model <- lm(comp_score_5to6 ~ head_start, data = nlsy_kids_HS)
summary(ols_model)
nlsy_kids %>% group_by(headstart)
nlsy_kids %>% group_by(head_start)
# Box plot
boxplot(test_scores ~ head_start, data = nlsy_kids, main = "Comparison of Test Scores by Head Start Participation")
boxplot(comp_score_5to6 ~ head_start, data = nlsy_kids, main = "Comparison of Test Scores by Head Start Participation")
nlsy_kids_HS <- nlsy_kids %>% sort(head_start==1)
nlsy_kids_HS <- nlsy_kids %>% sort(head_start=1)
nlsy_kids_HS <- summary(subset(nlsy_kids, head_start == 1))
nlsy_kids_HS
nlsy_kids_HS <- subset(nlsy_kids, head_start == 1)
summary(nlsy_kids_HS)
nlsy_kids_HS <- subset(nlsy_kids, head_start == 1)
nlsy_kids_NHS <- subset(nlsy_kids, head_start == 0)
summary(nlsy_kids_HS)
summary(nlsy_kids_NHS)
summary(nlsy_kids_HS) - summary(nlsy_kids_NHS)
summary(nlsy_kids_HS - nlsy_kids_NHS)
mean(nlsy_kids_HS)
mean(nlsy_kids_NHS)
mean(nlsy_kids_HS)
mean(nlsy_kids_NHS)
# The PDF will show the code AND output here.
# Summarize the data here.
#looking at the amount of missing data to determine which ones are worth dropping.
colSums(is.na(nlsy_kids))/nrow(nlsy_kids)
#ppvt_3 is missing 80%+, dropping would result in most of the data being missing
nlsy_kids<-nlsy_kids %>% drop_na(lninc_0to3, momed, lnbw,
comp_score_5to6 ,learndis)
view(nlsy_kids)
summary(nlsy_kids)
nlsy_kids_HS <- subset(nlsy_kids, head_start == 1)
nlsy_kids_NHS <- subset(nlsy_kids, head_start == 0)
# Subset the dataset for head_start = 1
subset_head_start_1 <- subset(nlsy_kids, head_start == 1)
# Subset the dataset for head_start = 0
subset_head_start_0 <- subset(nlsy_kids, head_start == 0)
# Get the names of all variables in the dataset
all_variables <- names(nlsy_kids)
# Initialize vectors to store differences
mean_differences <- c()
median_differences <- c()
# Loop through variables
for (variable in all_variables) {
# Skip non-numeric variables
if (!is.numeric(nlsy_kids[[variable]])) {
next
}
# Calculate mean and median for head_start = 1
mean_head_start_1 <- mean(subset_head_start_1[[variable]])
median_head_start_1 <- median(subset_head_start_1[[variable]])
# Calculate mean and median for head_start = 0
mean_head_start_0 <- mean(subset_head_start_0[[variable]])
median_head_start_0 <- median(subset_head_start_0[[variable]])
# Calculate differences
mean_difference <- mean_head_start_1 - mean_head_start_0
median_difference <- median_head_start_1 - median_head_start_0
# Store differences in vectors
mean_differences <- c(mean_differences, mean_difference)
median_differences <- c(median_differences, median_difference)
}
# Create a data frame to display the results
results <- data.frame(
Variable = all_variables,
MeanDifference = mean_differences,
MedianDifference = median_differences
)
# Print the results
print(results)
summary(ols_model)
knitr::opts_chunk$set(echo = TRUE) # sets the code chunk format
rm(list = ls()) # clears the environment
# Calculate family mean of Head Start participation and age 5-6 test scores
family_means <- aggregate(cbind(head_start, comp_score_5to6) ~ mom_id, data = nlsy_kids, FUN = mean)
knitr::opts_chunk$set(echo = TRUE) # sets the code chunk format
rm(list = ls()) # clears the environment
# The PDF will show the code you write here but not the output.
# Load packages and dataset here.
rm(list=ls())
library(tidyverse)
library(fixest)
load(url("https://github.com/tvogl/econ121/raw/main/data/nlsy_kids.Rdata"))
# The PDF will show the code AND output here.
# Summarize the data here.
#looking at the amount of missing data to determine which ones are worth dropping.
colSums(is.na(nlsy_kids))/nrow(nlsy_kids)
#ppvt_3 is missing 80%+, dropping would result in most of the data being missing
nlsy_kids<-nlsy_kids %>% drop_na(lninc_0to3, momed, lnbw,
comp_score_5to6 ,learndis)
view(nlsy_kids)
summary(nlsy_kids)
nlsy_kids_HS <- subset(nlsy_kids, head_start == 1)
nlsy_kids_NHS <- subset(nlsy_kids, head_start == 0)
#comparing the difference of mean and median of the two subsets of head_start
# Subset the dataset for head_start = 1
subset_head_start_1 <- subset(nlsy_kids, head_start == 1)
# Subset the dataset for head_start = 0
subset_head_start_0 <- subset(nlsy_kids, head_start == 0)
# Get the names of all variables in the dataset
all_variables <- names(nlsy_kids)
# Initialize vectors to store differences
mean_differences <- c()
median_differences <- c()
# Loop through variables
for (variable in all_variables) {
# Skip non-numeric variables
if (!is.numeric(nlsy_kids[[variable]])) {
next
}
# Calculate mean and median for head_start = 1
mean_head_start_1 <- mean(subset_head_start_1[[variable]])
median_head_start_1 <- median(subset_head_start_1[[variable]])
# Calculate mean and median for head_start = 0
mean_head_start_0 <- mean(subset_head_start_0[[variable]])
median_head_start_0 <- median(subset_head_start_0[[variable]])
# Calculate differences
mean_difference <- mean_head_start_1 - mean_head_start_0
median_difference <- median_head_start_1 - median_head_start_0
# Store differences in vectors
mean_differences <- c(mean_differences, mean_difference)
median_differences <- c(median_differences, median_difference)
}
# Create a data frame to display the results
results <- data.frame(
Variable = all_variables,
MeanDifference = mean_differences,
MedianDifference = median_differences
)
# Print the results, head_start minus non_head_start
print(results)
# All question 3 code here.
# Run OLS regression
ols_model <- lm(comp_score_5to6 ~ head_start, data = nlsy_kids)
summary(ols_model)
boxplot(comp_score_5to6 ~ head_start, data = nlsy_kids, main = "Comparison of Test Scores by Head Start Participation")
# Calculate family mean of Head Start participation and age 5-6 test scores
family_means <- aggregate(cbind(head_start, comp_score_5to6) ~ mom_id, data = nlsy_kids, FUN = mean)
# Create a new data frame with family means
family_data <- data.frame(
MotherID = family_means$mom_id,
Mean_HeadStart = family_means$head_start,
Mean_TestScore = family_means$comp_score_5to6
)
# Use OLS to estimate the association between mean Head Start participation and mean test scores
ols_model_mother <- lm(Mean_TestScore ~ Mean_HeadStart, data = family_data)
# Print the summary of the model
summary(ols_model_mother)
# Create a new data frame with family-level means
family_means <- nlsy_kids %>%
group_by(mom_id) %>%
summarise(mean_head_start = mean(head_start),
mean_test_scores = mean(comp_score_5to6))
# Print the first few rows of the new data frame
head(family_means)
view(family_means)
# Run OLS regression
ols_model_family <- lm(mean_test_scores ~ mean_head_start, data = family_means)
# Summarize the model
summary(ols_model_family)
# All question 4 code here
# Calculate family mean of Head Start participation and age 5-6 test scores
family_means <- aggregate(cbind(head_start, comp_score_5to6) ~ mom_id, data = nlsy_kids, FUN = mean)
# Create a new data frame with family means
family_data <- data.frame(
MotherID = family_means$mom_id,
Mean_HeadStart = family_means$head_start,
Mean_TestScore = family_means$comp_score_5to6
)
# Use OLS to estimate the association between mean Head Start participation and mean test scores
ols_model_mother <- lm(Mean_TestScore ~ Mean_HeadStart, data = family_data)
# Print the summary of the model
summary(ols_model_mother)
# Create a new data frame with family-level means
family_means <- nlsy_kids %>%
group_by(mom_id) %>%
summarise(mean_head_start = mean(head_start),
mean_test_scores = mean(comp_score_5to6))
# Run OLS regression
ols_model_family <- lm(mean_test_scores ~ mean_head_start, data = family_means)
# Summarize the model
summary(ols_model_family)
# All question 4 code here
# Create a new data frame with family-level means
family_means <- nlsy_kids %>%
group_by(mom_id) %>%
summarise(mean_head_start = mean(head_start),
mean_test_scores = mean(comp_score_5to6))
# Run OLS regression
ols_model_family <- lm(mean_test_scores ~ mean_head_start, data = family_means)
# Summarize the model
summary(ols_model_family)
# All question 3 code here.
# Run OLS regression
ols_model <- lm(comp_score_5to6 ~ head_start, data = nlsy_kids)
summary(ols_model)
#boxplot(comp_score_5to6 ~ head_start, data = nlsy_kids, main = "Comparison of Test Scores by Head Start Participation")
